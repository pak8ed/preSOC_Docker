// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource preSOC {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String                 @default("")
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String   @id @default(cuid())
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//********************* DB Adh√©rents *********************//
enum Civilite {
  Mme
  Mr
  Autre
}

enum Qualite {
  Adherent
  AncienAdherent
  Sympathisant
}

enum Corps {
  Certifie
  PLP
  CPE
  PRCE
  ProfEPS
  BiAdmissible
  Agrege
  ChairesSUP
  PRAG
  Etudiant
  MEEF
  EAP
  Stagiaire
  CongeParental
  AED
  AESH
  AP
  AE
  Disponibilite
  MA
  MAII
  Contractuel
  AgentAdmin
  IndiceInf321
  ChargeEPS
  Instituteur
  ProfEcoles
  InstitSEGPA
  PsyEN
  Infirmier
  Retraite
  PEGC
}

enum Classe {
  Normale
  HorsClasse
  ClasseExc
}

model Adherent {
  id                 String     @id @default(cuid())
  civilite           Civilite   @default(Mme)
  nom                String
  nom_naissance      String?
  prenom             String
  date_naissance     DateTime
  qualite            Qualite
  section_academique String
  etablissement      String
  email              String?    @unique
  tel                String?    @unique
  date_created       DateTime
  date_last_updated  DateTime?
  corps              Corps?
  classe             Classe?
  echelon            Int?
  code_adherent      String?    @unique
  commentaire        String?
  adresse            Adresse?
  adhesions          Adhesion[]
}

enum ActionType {
  CREATION
  MODIFICATION
  SUPPRESSION
}

model HistoriqueAdherent {
  id                 String     @id @default(cuid())
  type_action        ActionType
  date_demande       String
  date_validation    String
  demandeur_action   String
  valideur_action    String
  civilite           Civilite?
  nom                String?
  nom_naissance      String?
  prenom             String?
  date_naissance     DateTime?
  qualite            Qualite?
  section_academique String?
  etablissement      String?
  email              String?    @unique
  tel                String?    @unique
  corps              Corps?
  classe             Classe?
  echelon            Int?
}

model Adresse {
  id                 String   @id @default(cuid())
  adherentId         String
  adresse            String
  complement_adresse String?
  code_postal        String
  ville              String
  adherent           Adherent @relation(fields: [adherentId], references: [id], onDelete: Cascade)

  @@unique([adherentId])
}

enum AdhesionStatus {
  OVERDUE
  PENDING
  PAID
}

enum MoyenPaiement {
  CB
  CHEQUES
  ESPECES
  PRELEVEMENT
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

model Adhesion {
  id                 String         @id @default(cuid())
  adherentId         String
  nom                String
  prenom             String
  section_academique String
  annee              Int
  fractionnement     Int
  montant_total      Float
  montant_paye       Float
  statut             AdhesionStatus
  paiements          Paiement[]
  adherent           Adherent       @relation(fields: [adherentId], references: [id], onDelete: Cascade)

  @@unique([adherentId, annee])
}

model Paiement {
  id             String         @id @default(cuid())
  adhesionId     String
  moyen_paiement MoyenPaiement?
  num_paiement   Int
  montant        Float
  date_prevue    DateTime
  date_paiement  DateTime?
  status         PaymentStatus
  adhesion       Adhesion       @relation(fields: [adhesionId], references: [id], onDelete: Cascade)

  @@unique([adhesionId, num_paiement])
}
